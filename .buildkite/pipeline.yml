steps:
  - key: create_custom_base_image
    label: ":docker: Create custom base image"
    agents:
      queue: new-normal # a dedicated queue using the default base image
    command: |
      export REGISTRY="$(nsc workspace describe -o json -k registry_url)"
      export SERVICE="base" # name of the image
      export DOCKER_REPOSITORY="$${REGISTRY}/$${SERVICE}:latest"

      # Extract Buildkite organization and cluster information for the next step
      echo "=== Extracting Buildkite Configuration ==="
      echo "Organization Slug: $${BUILDKITE_ORGANIZATION_SLUG}"
      echo "Cluster ID: $${BUILDKITE_CLUSTER_ID:-not available}"
      echo "Queue: $${BUILDKITE_AGENT_META_DATA_QUEUE:-new-normal}"

      # Export these values for the next step via buildkite-agent meta-data
      buildkite-agent meta-data set "org-slug" "$${BUILDKITE_ORGANIZATION_SLUG}"
      buildkite-agent meta-data set "cluster-id" "$${BUILDKITE_CLUSTER_ID:-}"
      buildkite-agent meta-data set "queue-id" "$${BUILDKITE_AGENT_META_DATA_QUEUE:-new-normal}"
      buildkite-agent meta-data set "docker-repository" "$${DOCKER_REPOSITORY}"

      docker buildx build \
        --no-cache \
        --file .buildkite/Dockerfile.build \
        --build-arg BUILDKITE_BUILD_NUMBER="$$BUILDKITE_BUILD_NUMBER" \
        --platform linux/amd64,linux/arm64 \
        --tag "$${DOCKER_REPOSITORY}" \
        --progress plain \
        --push .

      echo "=== Custom Base Image Created ==="
      echo "Build #$BUILDKITE_BUILD_NUMBER"
      echo "Repository: $${DOCKER_REPOSITORY}"
      buildkite-agent annotate --style "success" ":rocket: Image pushed to \`$${DOCKER_REPOSITORY}\`"

  - key: update_base_image
    label: ":gear: Update base image URL"
    depends_on: create_custom_base_image
    agents:
      queue: new-normal # use the same queue as the first step
    command: |
      # Get values from first step's meta-data
      export BK_ORG_SLUG="$(buildkite-agent meta-data get "org-slug")"
      export BK_CLUSTER_ID="$(buildkite-agent meta-data get "cluster-id")"
      export BK_QUEUE_ID="$(buildkite-agent meta-data get "queue-id")"
      export DOCKER_REPOSITORY="$(buildkite-agent meta-data get "docker-repository")"

      echo "=== Updating Base Image URL ==="
      echo "Build #$BUILDKITE_BUILD_NUMBER"
      echo "Organization Slug: $${BK_ORG_SLUG}"
      echo "Cluster ID: $${BK_CLUSTER_ID:-not available}"
      echo "Queue ID: $${BK_QUEUE_ID}"
      echo "Docker Repository: $${DOCKER_REPOSITORY}"

      # Check if Node.js is available
      if ! command -v node &> /dev/null; then
          echo "‚ùå Node.js not found. Installing..."
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
      fi

      # Debug: Show current working directory and files
      echo "üîç Current working directory: $(pwd)"
      echo "üìÅ Files in current directory:"
      ls -la

      # Check for update_base_image.js in multiple locations
      SCRIPT_PATH=""
      if [ -f "update_base_image.js" ]; then
          SCRIPT_PATH="update_base_image.js"
          echo "‚úÖ Found update_base_image.js in current directory"
      elif [ -f "./update_base_image.js" ]; then
          SCRIPT_PATH="./update_base_image.js"
          echo "‚úÖ Found update_base_image.js with ./ prefix"
      elif [ -f "$${BUILDKITE_BUILD_CHECKOUT_PATH}/update_base_image.js" ]; then
          SCRIPT_PATH="$${BUILDKITE_BUILD_CHECKOUT_PATH}/update_base_image.js"
          echo "‚úÖ Found update_base_image.js in checkout path"
      else
          echo "‚ùå update_base_image.js not found in any expected location:"
          echo "   - $(pwd)/update_base_image.js"
          echo "   - $${BUILDKITE_BUILD_CHECKOUT_PATH:-undefined}/update_base_image.js"
          echo ""
          echo "üîç Let's check the entire directory structure:"
          find . -name "update_base_image.js" -type f 2>/dev/null || echo "No update_base_image.js found anywhere"
          exit 1
      fi

      echo "üìç Using script path: $${SCRIPT_PATH}"

      # Check required values from first step
      if [ -z "$${BK_ORG_SLUG:-}" ] || [ -z "$${BK_CLUSTER_ID:-}" ] || [ -z "$${BK_QUEUE_ID:-}" ]; then
          echo "‚ùå Missing required values from first step:"
          echo "   Organization Slug: $${BK_ORG_SLUG:-not set}"
          echo "   Cluster ID: $${BK_CLUSTER_ID:-not set}"
          echo "   Queue ID: $${BK_QUEUE_ID:-not set}"
          echo ""
          echo "‚ÑπÔ∏è  The first step should have set these values via meta-data"

          # Option to skip or fail
          if [ "$${SKIP_BASE_IMAGE_UPDATE:-false}" = "true" ]; then
              echo "‚è≠Ô∏è  Skipping base image update (SKIP_BASE_IMAGE_UPDATE=true)"
              exit 0
          else
              echo "üí° Set SKIP_BASE_IMAGE_UPDATE=true to skip this step temporarily"
              exit 1
          fi
      fi

      # Check for API token (required for GraphQL authentication)
      if [ -z "$${BUILDKITE_API_TOKEN:-}" ]; then
          echo "‚ùå Missing BUILDKITE_API_TOKEN environment variable"
          echo ""
          echo "‚ÑπÔ∏è  To use the GraphQL API, you need to set BUILDKITE_API_TOKEN with a token that has:"
          echo "   - GraphQL scope enabled"
          echo "   - Write Clusters (write_clusters) permission"
          echo ""
          echo "   You can create a token at: https://buildkite.com/user/api-access-tokens"

          # Option to skip or fail
          if [ "$${SKIP_BASE_IMAGE_UPDATE:-false}" = "true" ]; then
              echo "‚è≠Ô∏è  Skipping base image update (SKIP_BASE_IMAGE_UPDATE=true)"
              exit 0
          else
              echo "üí° Set SKIP_BASE_IMAGE_UPDATE=true to skip this step temporarily"
              exit 1
          fi
      fi

      # Mask the token in logs for security
      echo "‚úì BUILDKITE_API_TOKEN is set (token: bkua_***$(echo "$${BUILDKITE_API_TOKEN}" | tail -c 5))"

      # Run the update_base_image.js script
      echo "üîÑ Running base image update script..."
      node "$${SCRIPT_PATH}" "$${BK_ORG_SLUG}" "$${BK_CLUSTER_ID}" "$${BK_QUEUE_ID}" "$${DOCKER_REPOSITORY}"

      buildkite-agent annotate --style "info" ":link: Base image URL updated to \`$${DOCKER_REPOSITORY}\`"

  - key: use_custom_base_image
    label: ":package: Use custom base image"
    depends_on: update_base_image
    agents:
      queue: default-hosted-custom # a dedicated queue using the custom base image with latest tag
    command: |
      echo "=== Using Custom Base Image ==="
      echo "Build #$BUILDKITE_BUILD_NUMBER"
      echo "Image build number marker:"
      cat /build-number-marker
